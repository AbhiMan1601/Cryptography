RSA CTF Notes 

It contains 3 parts
part1: Key Generation

Select  p,q             p and q are prime numbers; p!=q
Calculate n             n = p * q
Calculate phi(ϕ)        ϕ = ( p - 1 ) * ( q - 1 )
Select integer e        GCD ( ϕ(n) , e ) = 1; 1 < e < ϕ(n)
Calculate d             d = inverse(e) % ϕ(n)
Public Key (Pk)         {e,n}
Private Key (Pr)        {d,n}

Part2: Encryption       

Plain Text (M)          M < n
Cipher Text (C)         C = pow( M , e) % n

Part3: Decryption

Cipher Text (C)         C
Plain Text (M)          M = pow(C , d) % n

Primality Testing - 
Fermat's little theorem = if p is prime then a^p % a(mod p) but converse is not true

Pollard's p-1 algorithm 
Input. Integer N to be factored.
1. Set a = 2 (or some other convenient value).
2. Loop j = 2, 3, 4,... up to a specified bound.
3. Set a = a^j mod N.
4. Compute d = gcd(a − 1,N).
5. If 1 <d<N then success, return d.
6. Increment j and loop again at Step 2.

square factorization = k.N + i^2 = j^2, N = (j^2 - i^2)/k = (i+j)(i-j)/k 
